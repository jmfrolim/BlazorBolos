@page "/"
@using BlazorBolos.Data;
@using Microsoft.EntityFrameworkCore;
@using MudBlazor;
@inject AppDbContext _context;
@inject IDialogService _dialogService;

<MudContainer Class="d-flex justify-center mb-2">
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Large"
            IconSize="Size.Large"
            Label="Incluir Bolo" Class="ma-2" @onclick="(e => CreateAsync())" />
</MudContainer>
<MudGrid Justify="Justify.Center" class="pr-4 pl-4">

    @foreach (var bolo in bolos)
    {
        <MudItem xs="2">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@bolo.Nome</MudText>
                        <MudText Typo="Typo.h6">R$ @bolo.Preco </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image="@bolo.ImagemUrl" width="150" Height="150" />
                <MudCardContent>
                    <MudText Typo="Typo.body2">@bolo.Descricao</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Primary"
                    @onclick="(e => UpdateAsync(bolo.Id))" />
                    <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error"
                    @onclick="(e => DeleteAsync(bolo.Id))" />
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>
@code {
    List<Bolo> bolos = new List<Bolo>();

    protected override async Task OnInitializedAsync()
    {
        bolos = await _context.Bolos.ToListAsync();
    }

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters();
        parameters.Add("Bolo", new Bolo());

        var dialog = await _dialogService.Show<IncluiAtualizaBoloDialog>("Incluir",
                                              parameters).Result;


        if (dialog.Data != null)
        {
            Bolo novoBolo = dialog.Data as Bolo;
            _context.Bolos.Add(novoBolo);
            await _context.SaveChangesAsync();
            bolos.Insert(0, novoBolo);
        }
    }

    private async Task UpdateAsync(int id)
    {
        var parameters = new DialogParameters();
        var boloAtualizar = bolos.FirstOrDefault(_ => _.Id == id);

        parameters.Add("Bolo", boloAtualizar);

        var dialog = await _dialogService.Show<IncluiAtualizaBoloDialog>("Atualizar",
                                         parameters).Result;

        if (dialog.Data != null)
        {
            var boloAtualizado = dialog.Data as Bolo;
            _context.Bolos.Update(boloAtualizado);
            await _context.SaveChangesAsync();

            bolos.Remove(boloAtualizar);
            bolos.Insert(0, boloAtualizado);
        }
    }

    private async Task DeleteAsync(int id)
    {
        bool? result = await _dialogService.ShowMessageBox(
                      "Confirma exclusão",
                      "A exclusão não pode ser desfeita!",
                      yesText: "Deleta", cancelText: "Cancela");

        if (result ?? false)
        {
            var boloRemover = await _context.Bolos.FindAsync(id);
            _context.Bolos.Remove(boloRemover);
            await _context.SaveChangesAsync();
            bolos.Remove(boloRemover);
        }
    }
}
